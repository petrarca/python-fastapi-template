version: '3'

tasks:
  setup:
    desc: Create a Python virtual environment
    cmds:
      - test -d .venv || uv venv

  install:
    desc: Install the package and development dependencies
    deps: [setup]
    cmds:
      - uv pip install --python .venv/bin/python -e '.[dev]'

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf build/ dist/ *.egg-info .pytest_cache .ruff_cache __pycache__ .coverage
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type d -name "*.egg-info" -exec rm -rf {} +

  clean:all:
    desc: Clean all artifacts including virtual environment
    cmds:
      - task: clean
      - rm -rf .venv

  format:
    desc: Format code using ruff
    cmds:
      - .venv/bin/ruff format .

  lint:
    desc: Run ruff linter
    cmds:
      - .venv/bin/ruff check --fix .

  check:
    desc: Run all code quality checks
    cmds:
      - task: format
      - task: lint

  build: 
    desc: Build the package
    cmds:
      - uv pip install --python .venv/bin/python build
      - .venv/bin/python -m build

  run:
    desc: Run the application without auto-reload
    cmds:
      - .venv/bin/python -m src.app.main --no-reload {{.CLI_ARGS}}

  run:dev:
    desc: Run the application with auto-reload for development
    cmds:
      - .venv/bin/python -m src.app.main --reload {{.CLI_ARGS}}

  run:custom:
    desc: Run the application with custom options
    cmds:
      - .venv/bin/python -m src.app.main {{.CLI_ARGS}}
      
  test:
    desc: Run tests with pytest
    cmds:
      - .venv/bin/pytest

  fct:
    desc: Format, check, test
    cmds:
      - task: format
      - task: check
      - task: test
